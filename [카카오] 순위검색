import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.stream.Stream;

//효율성 탈락
//Stream으로 깔끔하게 하려고 했지만 그렇게 깔끔하지도 않음
// 효율성은 단순 루프로는 안될 것 같음 효율성을 뚫기 위해서는 소스가 많이 더러워 질 것 같음(추후 효율성 고려 로직 수정)
// 클래스 필드는 은닉화 해야하지만 lombok 사용 불가로 코딩테스트에서는 그냥 직접참조

class Applicant{
	
	String language;
	String part;
	String career;
	String food;
	int score;
	
	public Applicant(String language, String part, String career, String food, int score) {
		super();
		this.language = language;
		this.part = part;
		this.career = career;
		this.food = food;
		this.score = score;
	}
}

class Solution {
	public int[] solution(String[] info, String[] query) {
        int[] answer = new int[query.length];
        List<Applicant> list = new LinkedList<>(); 
        for(String person : info) {
        	String[] data = person.split(" ");
        	list.add(new Applicant(data[0],data[1],data[2],data[3],Integer.parseInt(data[4])));
        }
        
        Stream<Applicant> stream = list.stream();
        
        for(int i = 0 ; i < query.length ; i++) {
        	String[] data = query[i].split(" and ");
        	String[] temp = data[3].split(" ");
        	int score = Integer.parseInt(temp[1]);
        	data[3] = temp[0];
        	stream = list.stream();
        	
        	if(data[0].equals("-") == false) {
        		stream = stream.filter(x -> x.language.equals(data[0]));
        	}
        	if(data[1].equals("-") == false) {
        		stream = stream.filter(x -> x.part.equals(data[1]));
        	}
        	if(data[2].equals("-") == false) {
        		stream = stream.filter(x -> x.career.equals(data[2]));
        	}
        	if(data[3].equals("-") == false) {
        		stream = stream.filter(x -> x.food.equals(data[3]));
        	}
        	stream = stream.filter(x -> x.score >= score);
        	answer[i] = (int)stream.count();
        }
        
        return answer;
    }
}
